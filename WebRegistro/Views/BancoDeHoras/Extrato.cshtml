@using static WebRegistro.Models.BancoDeHoras
@model WebRegistro.ViewModels.ExtratoViewModel

@{
    ViewData["Title"] = "Extrato de Banco de Horas";

    // --- Funções Auxiliares para formatação na View ---

    // Função CORRIGIDA para formatar o TimeSpan para totais > 24h
    string FormatTimeSpan(TimeSpan ts)
    {
        var signal = ts.TotalHours < 0 ? "-" : "";
        // Usando (int)ts.TotalHours para obter o total de horas corretamente
        return $"{signal}{Math.Abs((int)ts.TotalHours):D2}h {Math.Abs(ts.Minutes):D2}m";
    }

    // Função para retornar uma classe CSS baseada no saldo (positivo/negativo)
    string GetSaldoClass(TimeSpan ts)
    {
        if (ts.TotalSeconds == 0) return "text-muted";
        return ts.TotalHours >= 0 ? "text-success" : "text-danger";
    }
}

@* Seção para exibir mensagens de sucesso *@
@if (TempData["SuccessMessage"] != null)
{
    <div class="alert alert-success alert-dismissible fade show" role="alert">
        @TempData["SuccessMessage"]
        <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
    </div>
}

<div class="d-flex justify-content-between align-items-center mb-4 flex-wrap">
    <div>
        <h2 class="mb-1">@ViewData["Title"]</h2>
        <p class="lead text-muted mb-0">Funcionário: <strong>@Model.Funcionario.NomeCompleto</strong></p>
    </div>
    <div class="mt-2 mt-md-0">
        @if (User.IsInRole("Admin") || User.IsInRole("RH"))
        {
            <a asp-action="AdicionarMovimentacao" asp-route-userId="@Model.Funcionario.Cpf" class="btn btn-primary">
                <i class="bi bi-plus-circle-fill me-1"></i> Adicionar Movimentação
            </a>
            <a asp-action="Fecha" asp-route-userId="@Model.Funcionario.Cpf" class="btn btn-primary">
                <i class="bi bi-plus-circle-fill me-1"></i> Adicionar Movimentação
            </a>
        }
        <a asp-controller="Dashboard" asp-action="Index" class="btn btn-outline-secondary">
            <i class="bi bi-arrow-left-circle me-1"></i> Voltar ao Dashboard
        </a>
    </div>
</div>

<div class="row g-3 mb-4">
    <div class="col-md-4">
        <div class="card shadow-sm text-center h-100">
            <div class="card-header"><h6 class="card-subtitle text-uppercase text-muted">Saldo Atual</h6></div>
            <div class="card-body d-flex align-items-center justify-content-center">
                <p class="card-text display-5 fw-bold @GetSaldoClass(Model.SaldoAtual)">
                    @FormatTimeSpan(Model.SaldoAtual)
                </p>
            </div>
        </div>
    </div>
    <div class="col-md-4">
        <div class="card shadow-sm text-center h-100">
            <div class="card-header"><h6 class="card-subtitle text-uppercase text-muted">Total de Créditos</h6></div>
            <div class="card-body d-flex align-items-center justify-content-center">
                <p class="card-text display-6 fw-bold text-success">
                    @FormatTimeSpan(Model.TotalCreditos)
                </p>
            </div>
        </div>
    </div>
    <div class="col-md-4">
        <div class="card shadow-sm text-center h-100">
            <div class="card-header"><h6 class="card-subtitle text-uppercase text-muted">Total de Débitos</h6></div>
            <div class="card-body d-flex align-items-center justify-content-center">
                <p class="card-text display-6 fw-bold text-danger">
                    @FormatTimeSpan(Model.TotalDebitos)
                </p>
            </div>
        </div>
    </div>
</div>

<div class="card shadow-sm">
    <div class="card-header">
        <h5 class="mb-0">Histórico de Movimentações</h5>
    </div>
    <div class="table-responsive">
        <table class="table table-striped table-hover mb-0 align-middle">
            <thead class="table-light">
                <tr>
                    <th style="width: 20px;"></th>
                    <th>Data da Ocorrência</th>
                    <th>Origem / Justificativa</th>
                    <th class="text-end">Duração</th>
                    <th class="text-center">Expira em</th>
                </tr>
            </thead>
            <tbody>
                @if (Model.Movimentacoes.Any())
                {
                    @foreach (var item in Model.Movimentacoes)
                    {
                        <tr>
                            <td>
                                @if (item.TipoMovimentacao == TipoMovimentacaoHoras.Credito)
                                {
                                    <i class="bi bi-arrow-up-circle-fill text-success fs-5" title="Crédito"></i>
                                }
                                else
                                {
                                    <i class="bi bi-arrow-down-circle-fill text-warning fs-5" title="Débito"></i>
                                }
                            </td>
                            <td>@item.Data.ToString("dd/MM/yyyy")</td> @* Sugestão: usar item.DataOcorrencia *@
                            <td>@item.Descricao</td> @* Sugestão: usar item.Origem *@

                            @* A LINHA CORRIGIDA ESTÁ AQUI *@
                            <td class="text-end fw-bold @(item.TipoMovimentacao == TipoMovimentacaoHoras.Credito ? "text-success" : "text-danger")">
                                @FormatTimeSpan(item.TipoMovimentacao == TipoMovimentacaoHoras.Credito ? item.Horas : -item.Horas)
                            </td>

                            <td class="text-center">
                                @(item.DataExpiracao?.ToString("dd/MM/yyyy") ?? "N/A")
                            </td>
                        </tr>
                    }
                }
                else
                {
                    // ...
                }
            </tbody>
        </table>
    </div>
</div>